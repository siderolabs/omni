# nameOverride: omni  # optional, if omitted the Chart name will be used
domainName: omni.example.com
accountUuid:
privateKeySource: "file:///omni.asc"
deployment:
  image: ghcr.io/siderolabs/omni
  tag: "latest"
  replicaCount: 1
  annotations: {}
  imagePullPolicy: IfNotPresent
auth:
  auth0:
    enabled: true
    clientId: "123456"
    domain: "https://www.auth0.example"
  saml:
    enabled: false
    url: "https://www.saml.example"
includeGenericDevicePlugin: true # 
initialUsers: []
name: "My Omni instance"
service:
  type: ClusterIP # currently only ClusterIP is supported by this Helm Chart
  siderolink:
    domainName: omni.siderolink.example.com
    wireguard:
      # Optional: explicit address to advertise (if empty, uses wireguard.namespace.svc.cluster.local)
      address: ""
      port: 30180
      type: NodePort  # NodePort, LoadBalancer, or ClusterIP
      externalTrafficPolicy: Cluster  # Local or Cluster (for NodePort/LoadBalancer)
  k8sProxy:
    domainName: omni.kubernetes.example.com
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 200m
    memory: 256Mi
    # Required for /dev/net/tun
    # https://www.talos.dev/v1.8/kubernetes-guides/configuration/device-plugins/
    squat.ai/tun: 1
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1
ingress:
  api:
    enabled: false
    host: omni.example.com
    ingressClassName: nginx
    annotations: {}
    certManager:
      enabled: false
      issuer: letsencrypt-prod
    tls:
      enabled: false
      secretName: omni-api-tls
  ui:
    enabled: false
    host: omni.example.com
    ingressClassName: nginx
    annotations: {}
    certManager:
      enabled: false
      issuer: letsencrypt-prod
    tls:
      enabled: false
      secretName: omni-ui-tls
  siderolink:
    enabled: false
    host: siderolink.omni.example.com
    ingressClassName: nginx
    annotations: {}
    certManager:
      enabled: false
      issuer: letsencrypt-prod
    tls:
      enabled: false
      secretName: omni-siderolink-tls
  kubernetesProxy:
    enabled: false
    host: kubernetes.omni.example.com
    ingressClassName: nginx
    annotations: {}
    certManager:
      enabled: false
      issuer: letsencrypt-prod
    tls:
      enabled: false
      secretName: omni-kubernetes-proxy-tls
extraArgs:
  # - --debug
  # - --image-factory-address=factory.talos.dev
  # - --auth-saml-metadata=/etc/omni/saml/metadata.xml
volumeMounts:
  tls:
    mountPath: null # "/etc/omni/tls"
    readOnly: true
  omniAsc:
    mountPath: "/omni.asc"
    subPath: "omni.asc"
    readOnly: true
etcd:
  # Set to true to use external etcd cluster (enables Deployment with multiple replicas)
  # Set to false to use embedded etcd (forces StatefulSet with 1 replica)
  external: false
  # External etcd configuration (only used when external: true)
  endpoints: []
    # - "https://etcd-1.example.com:2379"
    # - "https://etcd-2.example.com:2379"
    # - "https://etcd-3.example.com:2379"
  # Optional: etcd authentication
  # username: ""
  # password: ""
  # Optional: etcd authentication from secret
  # auth:
  #   secretName: "etcd-auth"
  #   usernameKey: "username"
  #   passwordKey: "password"
  # Optional: TLS configuration for etcd
  # tls:
  #   enabled: false
  #   certFile: "/etc/etcd/tls/client.crt"
  #   keyFile: "/etc/etcd/tls/client.key"
  #   caFile: "/etc/etcd/tls/ca.crt"
  #   insecureSkipVerify: false
  #   # Optional: TLS certificates from secret
  #   secretName: "etcd-tls"
  #   certKey: "client.crt"
  #   keyKey: "client.key"
  #   caKey: "ca.crt"
volumes:
  etcd:
    # For Deployment (backwards compatibility): manual PVC name
    persistentVolumeClaimName: omni-pvc
    # For StatefulSet (embedded etcd): automatic PVC provisioning
    size: "50Gi"
    # storageClass: ""  # Use default storage class if not specified
  tls:
    secretName: null # tls
  gpg:
    secretName: gpg
## Add custom volumes
customVolumes:
#  - name: saml-metadata
#    configMap:
#      name: saml-metadata
#      items:
#        - key: metadata.xml
#          path: metadata.xml

## Add custom volumesMounts
customVolumeMounts:
#  - name: saml-metadata
#    mountPath: /etc/omni/saml/metadata.xml
#    subPath: metadata.xml
#    readOnly: true
