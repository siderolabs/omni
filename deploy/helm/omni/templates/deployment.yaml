{{- $existingDeployment := lookup "apps/v1" "Deployment" .Release.Namespace (include "omni.name" .) }}
{{- $existingStatefulSet := lookup "apps/v1" "StatefulSet" .Release.Namespace (include "omni.name" .) }}
{{- if or $existingDeployment (and .Values.etcd.external (not $existingStatefulSet)) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "omni.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "omni.labels" . | nindent 4 }}
    app.kubernetes.io/component: omni
    {{- with .Values.deployment.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- toYaml .Values.deployment.annotations | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels: {{- include "omni.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- if .Values.deployment.podAnnotations }}
      annotations:
      {{- toYaml .Values.deployment.annotations | nindent 6 }}
    {{- end }}
      labels: 
      {{- include "omni.labels" . | nindent 8 }}
        app.kubernetes.io/component: omni
      {{- with .Values.deployment.labels }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      containers:
      - name: omni
        image: {{ .Values.deployment.image }}:{{ .Values.deployment.tag | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.deployment.imagePullPolicy }}
        resources:
          {{- with .Values.resources }}
          {{- toYaml . | nindent 12 }}
          {{- end }}
        ports:
          - name: omni
            containerPort: 8080
            protocol: TCP
          - name: siderolink
            containerPort: 8090
            protocol: TCP
          - name: k8s-proxy
            containerPort: 8095
            protocol: TCP
          - name: wireguard
            containerPort: 50180
            protocol: UDP
          - name: embedded-etcd
            containerPort: 2379
            protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
            add:
              - NET_ADMIN
        env:
        {{- if and .Values.etcd.external .Values.etcd.auth .Values.etcd.auth.secretName }}
          - name: ETCD_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.etcd.auth.secretName }}
                key: {{ .Values.etcd.auth.usernameKey | default "username" }}
          - name: ETCD_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.etcd.auth.secretName }}
                key: {{ .Values.etcd.auth.passwordKey | default "password" }}
        {{- end }}
        volumeMounts:
          {{- if .Values.volumeMounts.tls.mountPath }}
          - name: tls
            mountPath: {{ .Values.volumeMounts.tls.mountPath }}
            readOnly: {{ .Values.volumeMounts.tls.readOnly }}
          {{- end }}
          - name: omni-asc
            mountPath: {{ .Values.volumeMounts.omniAsc.mountPath }}
            subPath: {{ .Values.volumeMounts.omniAsc.subPath }}
            readOnly: {{ .Values.volumeMounts.omniAsc.readOnly }}
          {{- if .Values.volumes.etcd.persistentVolumeClaimName }}
          - name: etcd
            mountPath: /_out
          {{- end }}
          {{- if and .Values.etcd.external .Values.etcd.tls.enabled .Values.etcd.tls.secretName }}
          - name: etcd-tls
            mountPath: /etc/etcd/tls
            readOnly: true
          {{- end }}
          {{- if .Values.customVolumeMounts }}
          {{- with .Values.customVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- end }}
        args:
          - --account-id="{{ .Values.accountUuid }}"
          - --advertised-api-url={{ printf "https://%s/" .Values.domainName }} 
          - --advertised-kubernetes-proxy-url={{ printf "https://%s/" .Values.service.k8sProxy.domainName }}
        {{- if .Values.auth.auth0.enabled }}
          - --auth-auth0-enabled=true
          - --auth-auth0-client-id={{ .Values.auth.auth0.clientId | toString}}
          - --auth-auth0-domain={{ .Values.auth.auth0.domain }}
        {{- end }}
        {{- if .Values.auth.saml.enabled }}
          - --auth-saml-enabled=true
        {{- if .Values.auth.saml.url }}
          - --auth-saml-url={{ .Values.auth.saml.url }}
        {{- end }}
        {{- end }}
        {{- if .Values.volumes.tls.secretName }}
          - --cert=/etc/omni/tls/tls.crt
          - --key=/etc/omni/tls/tls.key
        {{- end }}
        {{- if .Values.etcd.external }}
          - --etcd-embedded=false
          - --etcd-endpoints={{ join "," .Values.etcd.endpoints }}
        {{- if .Values.etcd.username }}
          - --etcd-username={{ .Values.etcd.username }}
        {{- else if and .Values.etcd.auth .Values.etcd.auth.secretName }}
          - --etcd-username=$(ETCD_USERNAME)
        {{- end }}
        {{- if .Values.etcd.password }}
          - --etcd-password={{ .Values.etcd.password }}
        {{- else if and .Values.etcd.auth .Values.etcd.auth.secretName }}
          - --etcd-password=$(ETCD_PASSWORD)
        {{- end }}
        {{- if and .Values.etcd.tls.enabled .Values.etcd.tls.secretName }}
          - --etcd-client-cert-path=/etc/etcd/tls/{{ .Values.etcd.tls.certKey | default "tls.crt" }}
          - --etcd-client-key-path=/etc/etcd/tls/{{ .Values.etcd.tls.keyKey | default "tls.key" }}
          - --etcd-ca-path=/etc/etcd/tls/{{ .Values.etcd.tls.caKey | default "ca.crt" }}
        {{- else if and .Values.etcd.tls.enabled .Values.etcd.tls.certFile }}
          - --etcd-client-cert-path={{ .Values.etcd.tls.certFile }}
          - --etcd-client-key-path={{ .Values.etcd.tls.keyFile }}
          - --etcd-ca-path={{ .Values.etcd.tls.caFile }}
        {{- end }}
        {{- if .Values.etcd.dialKeepAliveTime }}
          - --etcd-dial-keepalive-time={{ .Values.etcd.dialKeepAliveTime }}
        {{- end }}
        {{- if .Values.etcd.dialKeepAliveTimeout }}
          - --etcd-dial-keepalive-timeout={{ .Values.etcd.dialKeepAliveTimeout }}
        {{- end }}
        {{- else }}
          - --etcd-embedded=true
        {{- end }}
        {{- if and .Values.initialUsers (gt (len .Values.initialUsers) 0) }}
          - --initial-users={{ join "," .Values.initialUsers }}
        {{- end }}
          - --name={{ .Values.name}}
          - --private-key-source={{ .Values.privateKeySource }}
        {{- if and .Values.etcd.external .Values.etcd.publicKeyFiles }}
          - --public-key-files={{ join "," .Values.etcd.publicKeyFiles }}
        {{- end }}
          - --siderolink-api-advertised-url={{ printf "https://%s" .Values.service.siderolink.domainName }}
          - --siderolink-wireguard-advertised-addr={{ if .Values.service.siderolink.wireguard.address }}{{ .Values.service.siderolink.wireguard.address }}{{ else }}{{ printf "%s.%s.svc.cluster.local" "wireguard" .Release.Namespace }}{{ end }}:{{ .Values.service.siderolink.wireguard.port }}
        {{- range $value := .Values.extraArgs }}
          - {{ $value }}
        {{- end }}
      volumes:
        {{- if .Values.volumes.tls.secretName }}
        - name: tls
          secret:
            secretName: {{ .Values.volumes.tls.secretName }}
        {{- end }}
        - name: omni-asc
          secret:
            secretName: {{ .Values.volumes.gpg.secretName }}
        {{- if .Values.volumes.etcd.persistentVolumeClaimName }}
        - name: etcd
          persistentVolumeClaim:
            claimName: {{ .Values.volumes.etcd.persistentVolumeClaimName }}
        {{- end }}
        {{- if and .Values.etcd.external .Values.etcd.tls.enabled .Values.etcd.tls.secretName }}
        - name: etcd-tls
          secret:
            secretName: {{ .Values.etcd.tls.secretName }}
        {{- end }}
        {{- if .Values.customVolumes }}
        {{- with .Values.customVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
{{- end }}
